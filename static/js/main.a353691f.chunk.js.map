{"version":3,"sources":["logo.svg","components/Navbar.js","components/TextForm.js","components/About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","props","React","createElement","className","data-bs-theme","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","concat","onClick","toggleMode","role","htmlFor","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","Fragment","style","color","heading","value","onChange","event","console","log","target","rows","newtext","toUpperCase","showAlert","toLowerCase","words","split","joinedWords","forEach","elem","undefined","length","About","background","myStyle","setMyStyle","_useState3","_useState4","btntext","setbtntext","aria-labelledby","border","Alert","alert","msg","App","setMode","setAlert","message","setTimeout","document","body","backgroundColor","reportWebVitals","onPerfEntry","Function","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.a353691f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Navbar = props => {\r\n  return (\r\n    \r\n    <div>\r\n     <nav className=\"navbar navbar-expand-lg bg-body-tertiary\" data-bs-theme={props.mode}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href=\"#\">About</a>\r\n        </li>\r\n        \r\n       \r\n      </ul>\r\n      {/*<form className=\"d-flex\" role=\"search\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n  </form>*/}\r\n  <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`} >\r\n  <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode </label>\r\n</div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n</div>\r\n\r\n\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title:PropTypes.string\r\n\r\n}\r\n\r\nexport default Navbar\r\n","import React,{useState} from 'react'\r\n\r\n\r\n\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick=()=>{\r\n  console.log(\"button was clicked\")\r\n  let newtext = text.toUpperCase();\r\n  setText(newtext)\r\n  props.showAlert(\"Converted to Upper Case\",\"success\")\r\n    }\r\n    const handleLoClick=()=>{\r\n        console.log(\"button was clicked\")\r\n        let newtext = text.toLowerCase();\r\n        setText(newtext)\r\n        props.showAlert(\"Converted to LowerCase\",\"success\")\r\n          }\r\n          const handleClearClick=()=>{\r\n            console.log(\"button was clicked\")\r\n            let newtext = \" \";\r\n            setText(newtext)\r\n            props.showAlert(\"Text Cleared\",\"success\")\r\n              }\r\n\r\n\r\n        const handleExtraSpaces = ()=>{\r\n                let words = text.split(' ');\r\n                let joinedWords = '';\r\n                // console.log(words);\r\n                words.forEach((elem)=>{\r\n                    if(elem[0] != undefined){\r\n                        joinedWords += elem + \" \";\r\n                        console.log(joinedWords);\r\n                    }\r\n                })\r\n                setText(joinedWords);\r\n                props.showAlert(\"Removed Extra Spaces\",\"success\")\r\n            }\r\n    const handleOnChange=(event)=>{\r\n        console.log('onchange')\r\n        setText(event.target.value)\r\n    }\r\n        \r\n    const [text,setText]= useState('Enter Text ');\r\n \r\n  return (<>\r\n<div className=\"container\" style={{color:props.mode==='dark'?'white':'black'}}>\r\n    <h1>{props.heading} </h1>\r\n<div className=\"mb-4\">\r\n\r\n<textarea className=\"form-control\"  value={text} onChange={handleOnChange} id=\"exampleFormControlTextarea1\" rows=\"8\"></textarea>\r\n</div>\r\n<button className=\"btn btn-primary mx-2\"  onClick={handleUpClick}  > Convert to UpperCase</button>\r\n<button className=\"btn btn-primary mx-2\"  onClick={handleLoClick} > Convert to LowerCase</button>\r\n<button className=\"btn btn-primary mx-2\"  onClick={handleClearClick} >Clear Text</button>\r\n<button className=\"btn btn-primary mx-2\"  onClick={handleExtraSpaces} >Remove Extra Space</button>\r\n\r\n    </div>\r\n    <div className=\"container my-3\"   style={{color:props.mode==='dark'?'white':'black'}}>\r\n        <h2>Your Text Summary</h2>\r\n        <p>{text.split(\" \").length} words and {text.length} characters </p>\r\n        <p>{.008 * text.split(\" \").length} Minutes Read</p>\r\n        <h2>Preview</h2>\r\n      <p>{text.length>0?text:\"Enter Something to preview it here\"}</p>\r\n\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function About() {\r\n    const [myStyle,setMyStyle]=useState({\r\n        color: 'white',\r\n        background : \"black\"\r\n \r\n        \r\n        })\r\n\r\n    const[btntext,setbtntext]=useState(\"Enable Light Mode\")\r\n\r\n    const toggleStyle=()=>{\r\n        if (myStyle.color == 'white'){\r\nsetMyStyle({\r\n    color: 'black',\r\n    background:'white',\r\n    border : '2px Solid White'\r\n\r\n})\r\nsetbtntext(\"Enable Light Mode\")\r\n\r\n        }\r\n\r\n       else\r\n       {\r\n        setMyStyle({\r\n            color: 'white',\r\n            background:'black'\r\n        \r\n        }) \r\n        setbtntext(\"Enable Dark Mode\")\r\n       } \r\n    }\r\n\r\n\r\n\r\n  return (\r\n<div className='container ' style={myStyle}>\r\n    <h1 className=' my-3'>About Us</h1>\r\n    <div className=\"accordion\" id=\"accordionPanelsStayOpenExample\">\r\n<div className=\"accordion-item\">\r\n<h2 className=\"accordion-header\" id=\"panelsStayOpen-headingOne\">\r\n    <button className=\"accordion-button\" type=\"button\"  style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseOne\" aria-expanded=\"true\" aria-controls=\"panelsStayOpen-collapseOne\">\r\n    Accordion Item #1\r\n    </button>\r\n</h2>\r\n<div id=\"panelsStayOpen-collapseOne\" className=\"accordion-collapse collapse show\"  style={myStyle} aria-labelledby=\"panelsStayOpen-headingOne\">\r\n    <div className=\"accordion-body\">\r\n    <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n    </div>\r\n</div>\r\n</div>\r\n<div className=\"accordion-item\">\r\n<h2 className=\"accordion-header\" id=\"panelsStayOpen-headingTwo\">\r\n    <button className=\"accordion-button collapsed\" type=\"button\"  style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseTwo\" aria-expanded=\"false\" aria-controls=\"panelsStayOpen-collapseTwo\">\r\n    Accordion Item #2\r\n    </button>\r\n</h2>\r\n<div id=\"panelsStayOpen-collapseTwo\" className=\"accordion-collapse collapse\"  style={myStyle} aria-labelledby=\"panelsStayOpen-headingTwo\">\r\n    <div className=\"accordion-body\">\r\n    <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n    </div>\r\n</div>\r\n</div>\r\n<div className=\"accordion-item\">\r\n<h2 className=\"accordion-header\" id=\"panelsStayOpen-headingThree\">\r\n    <button className=\"accordion-button collapsed\" type=\"button\"  style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseThree\" aria-expanded=\"false\" aria-controls=\"panelsStayOpen-collapseThree\">\r\n    Accordion Item #3\r\n    </button>\r\n</h2>\r\n<div id=\"panelsStayOpen-collapseThree\" className=\"accordion-collapse collapse\"  style={myStyle} aria-labelledby=\"panelsStayOpen-headingThree\">\r\n    <div className=\"accordion-body\">\r\n    <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n    </div>\r\n</div>\r\n</div>\r\n</div>\r\n<div className='conatiner my-3'>\r\n<button type=\"button\" onClick={toggleStyle} className=\"btn btn-dark\">{btntext}</button>\r\n</div>\r\n  \r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n  return (\r\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n<strong>{props.alert.type}</strong>:{props.alert.msg}\r\n\r\n</div>\r\n    \r\n  )\r\n}\r\n\r\n","import logo from './logo.svg';\nimport './App.css';\nimport React, { Component }  from 'react';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport About from './components/About';\nimport { useState } from 'react';\nimport Alert from './components/Alert';\n \n\n\n\n\n\n\n\n\n\n\nfunction App() {\n  const [mode,setMode]= useState('light');\n\n  const [alert,setAlert]=useState(null);\n\nconst showAlert=(message,type)=>{\n  setAlert({\n    msg : message,\n    type : type\n  }\n\n  )\n  setTimeout(() => {\n    setAlert(null);\n      \n     },3000);\n    \n}\n\n\n\n  const toggleMode=()=>{\n\n    if(mode=='light')\n{setMode('dark');\ndocument.body.style.backgroundColor=\"rgb(2 25 31)\";\nshowAlert(\"Dark Mode Enabled\",\"success\")\n\n}\nelse{\n\n  setMode ('light');\n  document.body.style.backgroundColor=\"#b2bec3\";\n  showAlert(\"Light Mode Enabled\",\"success\")\n}\n\n  }\n\n\n  return (\n    <>\n\n      <Navbar title=\"TextUtils\" mode= {mode} toggleMode={toggleMode}/>;\n      \n      <Alert alert={alert}/>\n      <div className='container'>   \n      <TextForm showAlert={showAlert} heading=\"Enter your text to analyse below \"  mode= {mode} />\n\n\n       <About/>\n      </div>\n\n\n\n   \n    </>\n  );\n  \n\n  }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}